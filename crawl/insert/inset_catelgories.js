const fs = require('fs');
const db = require('./db-config');

// ƒê∆∞·ªùng d·∫´n file ch·ª©a d·ªØ li·ªáu categories
const CATEGORIES_FILE = 'E:\\ky8\\mobile\\crawl\\crawl\\gacsach_data\\categories\\all_categories.json';

// H√†m log v·ªõi m√†u s·∫Øc
function log(message, type = 'info') {
    const timestamp = new Date().toISOString();
    let coloredMessage;

    switch(type) {
        case 'success':
            coloredMessage = `\x1b[32m${message}\x1b[0m`; // M√†u xanh l√°
            break;
        case 'error':
            coloredMessage = `\x1b[31m${message}\x1b[0m`; // M√†u ƒë·ªè
            break;
        case 'warning':
            coloredMessage = `\x1b[33m${message}\x1b[0m`; // M√†u v√†ng
            break;
        default:
            coloredMessage = message;
    }

    console.log(`[${timestamp}] ${coloredMessage}`);
}

// H√†m ch√≠nh ƒë·ªÉ insert categories
async function insertCategories() {
    try {
        log('B·∫Øt ƒë·∫ßu import d·ªØ li·ªáu categories', 'info');

        // Ki·ªÉm tra file t·ªìn t·∫°i
        if (!fs.existsSync(CATEGORIES_FILE)) {
            log(`File ${CATEGORIES_FILE} kh√¥ng t·ªìn t·∫°i!`, 'error');
            return;
        }

        // ƒê·ªçc v√† parse d·ªØ li·ªáu JSON
        log(`ƒêang ƒë·ªçc file: ${CATEGORIES_FILE}`, 'info');
        const fileData = fs.readFileSync(CATEGORIES_FILE, 'utf8');

        let categories;
        try {
            categories = JSON.parse(fileData);
            log(`ƒê√£ ƒë·ªçc th√†nh c√¥ng: T√¨m th·∫•y ${categories.length} th·ªÉ lo·∫°i`, 'success');
        } catch (error) {
            log(`Kh√¥ng th·ªÉ parse n·ªôi dung JSON: ${error.message}`, 'error');
            return;
        }

        // K·∫øt n·ªëi v·ªõi database
        const client = await db.getClient();
        log('ƒê√£ k·∫øt n·ªëi t·ªõi database', 'success');

        try {
            // ƒê·∫øm s·ªë l∆∞·ª£ng categories hi·ªán c√≥ trong DB
            const countResult = await client.query('SELECT COUNT(*) FROM categories');
            const existingCount = parseInt(countResult.rows[0].count);
            log(`Hi·ªán c√≥ ${existingCount} th·ªÉ lo·∫°i trong database`, 'info');

            let successCount = 0;
            let errorCount = 0;
            let updateCount = 0;

            // Insert t·ª´ng category
            for (let i = 0; i < categories.length; i++) {
                const category = categories[i];
                try {
                    // Ki·ªÉm tra xem category ƒë√£ t·ªìn t·∫°i (theo url) ch∆∞a
                    const checkResult = await client.query(
                        'SELECT category_id FROM categories WHERE url = $1',
                        [category.url]
                    );

                    if (checkResult.rows.length > 0) {
                        // Category ƒë√£ t·ªìn t·∫°i, update
                        const updateResult = await client.query(
                            'UPDATE categories SET name = $1, title = $2 WHERE url = $3 RETURNING category_id',
                            [category.name, category.title, category.url]
                        );

                        updateCount++;
                        log(`[${i+1}/${categories.length}] ‚úÖ ƒê√£ c·∫≠p nh·∫≠t th·ªÉ lo·∫°i "${category.name}" (ID: ${checkResult.rows[0].category_id})`, 'success');
                    } else {
                        // Category ch∆∞a t·ªìn t·∫°i, insert m·ªõi
                        const insertResult = await client.query(
                            'INSERT INTO categories(name, title, url) VALUES($1, $2, $3) RETURNING category_id',
                            [category.name, category.title, category.url]
                        );

                        successCount++;
                        log(`[${i+1}/${categories.length}] ‚úÖ ƒê√£ th√™m m·ªõi th·ªÉ lo·∫°i "${category.name}" (ID: ${insertResult.rows[0].category_id})`, 'success');
                    }
                } catch (error) {
                    errorCount++;
                    log(`[${i+1}/${categories.length}] ‚ùå L·ªói khi x·ª≠ l√Ω th·ªÉ lo·∫°i "${category.name}": ${error.message}`, 'error');
                }
            }

            // Ki·ªÉm tra l·∫°i s·ªë l∆∞·ª£ng sau khi insert
            const newCountResult = await client.query('SELECT COUNT(*) FROM categories');
            const newCount = parseInt(newCountResult.rows[0].count);

            // Hi·ªÉn th·ªã th·ªëng k√™
            log('\n=== K·∫æT QU·∫¢ IMPORT CATEGORIES ===', 'info');
            log(`‚úÖ Th√™m m·ªõi: ${successCount}`, 'success');
            log(`üîÑ C·∫≠p nh·∫≠t: ${updateCount}`, 'info');
            log(`‚ùå L·ªói: ${errorCount}`, 'error');
            log(`T·ªïng s·ªë th·ªÉ lo·∫°i trong database: ${newCount} (tƒÉng th√™m ${newCount - existingCount})`, 'info');

        } catch (error) {
            log(`L·ªói trong qu√° tr√¨nh x·ª≠ l√Ω: ${error.message}`, 'error');
        } finally {
            // Gi·∫£i ph√≥ng client
            client.release();
            log('ƒê√£ ƒë√≥ng k·∫øt n·ªëi database', 'info');

            // ƒê√≥ng pool k·∫øt n·ªëi
            await db.pool.end();
        }

    } catch (error) {
        log(`L·ªói kh√¥ng mong mu·ªën: ${error.message}`, 'error');
        console.error(error.stack);
    }
}

// Th·ª±c thi ch∆∞∆°ng tr√¨nh
insertCategories().then(() => {
    log('Ch∆∞∆°ng tr√¨nh ƒë√£ k·∫øt th√∫c', 'info');
}).catch(error => {
    log(`L·ªói ch∆∞∆°ng tr√¨nh: ${error.message}`, 'error');
    console.error(error.stack);
});