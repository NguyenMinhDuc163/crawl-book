const fs = require('fs');
const path = require('path');
const axios = require('axios');
const cheerio = require('cheerio');
const { Pool } = require('pg');

// C·∫•u h√¨nh k·∫øt n·ªëi PostgreSQL
const pool = new Pool({
    user: 'postgres',
    host: '20.2.26.123',
    database: 'book_brain_db',
    password: 'NguyenDuc@163',
    port: 5432,
});

// Th∆∞ m·ª•c backup
const BACKUP_DIR = path.join(__dirname, 'db_backup');
if (!fs.existsSync(BACKUP_DIR)) {
    fs.mkdirSync(BACKUP_DIR, { recursive: true });
}

// M√¥ t·∫£ m·∫∑c ƒë·ªãnh khi kh√¥ng t√¨m th·∫•y excerpt
const DEFAULT_EXCERPT = "Cu·ªën s√°ch n√†y mang ƒë·∫øn cho b·∫°n ƒë·ªçc nh·ªØng g√≥c nh√¨n s√¢u s·∫Øc v√† ƒë·∫ßy c·∫£m h·ª©ng. T√°c gi·∫£ ƒë√£ kh√©o l√©o d·∫´n d·∫Øt ng∆∞·ªùi ƒë·ªçc qua t·ª´ng trang s√°ch v·ªõi l·ªëi vi·∫øt cu·ªën h√∫t v√† n·ªôi dung ƒë·∫ßy t√≠nh th·ª±c ti·ªÖn. ƒê√¢y kh√¥ng ch·ªâ l√† m·ªôt t√°c ph·∫©m ƒë√°ng ƒë·ªçc m√† c√≤n l√† ngu·ªìn tri th·ª©c qu√Ω gi√°, gi√∫p b·∫°n m·ªü r·ªông t·∫ßm nh√¨n v√† c√≥ th√™m nhi·ªÅu g√≥c nh√¨n m·ªõi v·ªÅ cu·ªôc s·ªëng. H√£y ƒë·ªìng h√†nh c√πng t√°c gi·∫£ trong h√†nh tr√¨nh kh√°m ph√° nh·ªØng gi√° tr·ªã s√¢u s·∫Øc ƒë∆∞·ª£c g·ª≠i g·∫Øm trong t·ª´ng ch∆∞∆°ng s√°ch.";

// Backup d·ªØ li·ªáu tr∆∞·ªõc khi thay ƒë·ªïi
async function backupExcerpts() {
    const client = await pool.connect();
    try {
        console.log('ƒêang t·∫°o backup d·ªØ li·ªáu excerpt...');
        const result = await client.query('SELECT book_id, title, excerpt FROM books');
        const timestamp = new Date().toISOString().replace(/:/g, '-');
        const backupFile = path.join(BACKUP_DIR, `excerpts_backup_${timestamp}.json`);

        fs.writeFileSync(backupFile, JSON.stringify(result.rows, null, 2), 'utf8');
        console.log(`‚úÖ ƒê√£ t·∫°o backup th√†nh c√¥ng t·∫°i: ${backupFile}`);
        return backupFile;
    } finally {
        client.release();
    }
}

// H√†m l√†m s·∫°ch excerpt
function cleanExcerpt(text) {
    if (!text) return null;

    // Lo·∫°i b·ªè rating ki·ªÉu "10/10" ·ªü ƒë·∫ßu
    let cleaned = text.replace(/^\s*\d+\/\d+\s+/i, '');

    // Lo·∫°i b·ªè c√°c ƒëo·∫°n nh∆∞ "Ebook mi·ªÖn ph√≠ t·∫°i : www.Sachvui.Com" v√† c√°c text t∆∞∆°ng t·ª±
    cleaned = cleaned.replace(/ebook mi·ªÖn ph√≠ t·∫°i[\s\S]*?sachvui\.com/i, '');
    cleaned = cleaned.replace(/sachvui\.com/i, '');
    cleaned = cleaned.replace(/www\.sachvui\.com/i, '');

    // Lo·∫°i b·ªè c√°c ti√™u ƒë·ªÅ kh√¥ng li√™n quan
    cleaned = cleaned.replace(/^\s*L·ªúI N√ìI ƒê·∫¶U[^a-zA-Z0-9\u00C0-\u1EF9]*/i, '');
    cleaned = cleaned.replace(/^\s*L·ªúI M·ªû ƒê·∫¶U[^a-zA-Z0-9\u00C0-\u1EF9]*/i, '');
    cleaned = cleaned.replace(/^\s*GI·ªöI THI·ªÜU[^a-zA-Z0-9\u00C0-\u1EF9]*/i, '');
    cleaned = cleaned.replace(/^\s*N·ªòI DUNG[^a-zA-Z0-9\u00C0-\u1EF9]*/i, '');

    // Lo·∫°i b·ªè URL
    cleaned = cleaned.replace(/https?:\/\/[^\s]+/g, '');
    cleaned = cleaned.replace(/www\.[^\s]+/g, '');

    // Chu·∫©n h√≥a kho·∫£ng tr·∫Øng
    cleaned = cleaned.replace(/\s+/g, ' ').trim();

    // ƒê·∫£m b·∫£o ƒë·ªô d√†i ph√π h·ª£p
    if (cleaned.length < 20) {
        return null;
    }

    // Vi·∫øt hoa ch·ªØ c√°i ƒë·∫ßu ti√™n
    if (cleaned.length > 0) {
        cleaned = cleaned.charAt(0).toUpperCase() + cleaned.slice(1);
    }

    return cleaned;
}

// H√†m crawl URL ƒë·ªÉ l·∫•y excerpt
async function crawlBookExcerpt(url) {
    try {
        console.log(`ƒêang crawl excerpt t·ª´ URL: ${url}`);
        const response = await axios.get(url);
        const $ = cheerio.load(response.data);

        // T√¨m ƒë√∫ng ph·∫ßn preview c·ªßa s√°ch
        const previewElement = $('.field-name-body .field-item.even').first();

        if (previewElement.length > 0) {
            // L·∫•y text thu·∫ßn t√∫y, gi·ªØ c√°c th·∫ª <p> b·∫±ng c√°ch th√™m d·∫•u xu·ªëng d√≤ng
            let previewText = '';

            // X·ª≠ l√Ω t·ª´ng th·∫ª p b√™n trong
            previewElement.find('p').each(function() {
                const paragraphText = $(this).text().trim();
                if (paragraphText) {
                    previewText += paragraphText + '\n\n';
                }
            });

            // N·∫øu kh√¥ng t√¨m th·∫•y th·∫ª p n√†o, l·∫•y to√†n b·ªô text
            if (!previewText) {
                previewText = previewElement.text().trim();
            }

            if (previewText) {
                console.log('T√¨m th·∫•y excerpt.');
                // L√†m s·∫°ch d·ªØ li·ªáu tr∆∞·ªõc khi tr·∫£ v·ªÅ
                return cleanExcerpt(previewText);
            }
        }

        console.log('Kh√¥ng t√¨m th·∫•y excerpt trong HTML.');
        return null;
    } catch (error) {
        console.error(`L·ªói khi crawl URL ${url}: ${error.message}`);
        return null;
    }
}

// H√†m ch√≠nh
async function resetAndCrawlExcerpts() {
    // 1. Backup d·ªØ li·ªáu hi·ªán t·∫°i
    const backupFile = await backupExcerpts();

    const client = await pool.connect();

    try {
        // 2. X√≥a t·∫•t c·∫£ d·ªØ li·ªáu excerpt
        console.log('ƒêang x√≥a t·∫•t c·∫£ d·ªØ li·ªáu excerpt...');
        await client.query('UPDATE books SET excerpt = NULL');
        console.log('‚úÖ ƒê√£ x√≥a t·∫•t c·∫£ d·ªØ li·ªáu excerpt');

        // 3. L·∫•y t·∫•t c·∫£ s√°ch ƒë·ªÉ crawl l·∫°i
        const booksResult = await client.query('SELECT book_id, title, url FROM books');
        const books = booksResult.rows;
        console.log(`T√¨m th·∫•y ${books.length} s√°ch ƒë·ªÉ crawl excerpt.`);

        // S·ªë li·ªáu th·ªëng k√™
        let successCount = 0;
        let defaultCount = 0;
        let errorCount = 0;

        // 4. Crawl l·∫°i excerpt cho t·ª´ng s√°ch
        for (const book of books) {
            try {
                console.log(`\nƒêang x·ª≠ l√Ω s√°ch: ${book.title} (ID: ${book.book_id})`);

                // Th·ª≠ crawl excerpt
                const newExcerpt = await crawlBookExcerpt(book.url);

                // M√¥ t·∫£ ƒë·ªÉ s·ª≠ d·ª•ng (ho·∫∑c crawled ho·∫∑c default)
                let excerptToUse;

                if (newExcerpt && newExcerpt.length > 50) {
                    // S·ª≠ d·ª•ng excerpt crawl ƒë∆∞·ª£c n·∫øu ƒë·ªß d√†i
                    excerptToUse = newExcerpt;
                    console.log(`‚úÖ ƒê√£ crawl ƒë∆∞·ª£c excerpt cho s√°ch ID ${book.book_id}`);
                    successCount++;
                } else {
                    // S·ª≠ d·ª•ng excerpt m·∫∑c ƒë·ªãnh
                    excerptToUse = DEFAULT_EXCERPT;
                    console.log(`üìù S·ª≠ d·ª•ng excerpt m·∫∑c ƒë·ªãnh cho s√°ch ID ${book.book_id}`);
                    defaultCount++;
                }

                // C·∫≠p nh·∫≠t v√†o database
                await client.query(
                    'UPDATE books SET excerpt = $1, updated_at = CURRENT_TIMESTAMP WHERE book_id = $2',
                    [excerptToUse, book.book_id]
                );

                // In ra preview c·ªßa excerpt
                console.log(`Excerpt (100 k√Ω t·ª± ƒë·∫ßu): ${excerptToUse.substring(0, 100)}...`);

            } catch (error) {
                console.error(`‚ùå L·ªói khi x·ª≠ l√Ω s√°ch ID ${book.book_id}: ${error.message}`);
                errorCount++;
            }

            // T·∫°m d·ª´ng ƒë·ªÉ tr√°nh qu√° t·∫£i server
            await new Promise(resolve => setTimeout(resolve, 1500));
        }

        // 5. Hi·ªÉn th·ªã th·ªëng k√™
        console.log('\n====== K·∫æT QU·∫¢ T·ªîNG QUAN ======');
        console.log(`‚úÖ C·∫≠p nh·∫≠t th√†nh c√¥ng b·∫±ng excerpt crawl ƒë∆∞·ª£c: ${successCount} s√°ch`);
        console.log(`üìù C·∫≠p nh·∫≠t b·∫±ng excerpt m·∫∑c ƒë·ªãnh: ${defaultCount} s√°ch`);
        console.log(`‚ùå L·ªói: ${errorCount} s√°ch`);
        console.log(`üìÅ D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c backup t·∫°i: ${backupFile}`);
        console.log('===============================');

        return {
            successCount,
            defaultCount,
            errorCount,
            backupFile
        };

    } finally {
        client.release();
    }
}

// H√†m ph·ª•c h·ªìi t·ª´ backup n·∫øu c·∫ßn
async function restoreFromBackup(backupFile) {
    console.log(`\nƒêang ph·ª•c h·ªìi d·ªØ li·ªáu t·ª´ backup: ${backupFile}`);

    try {
        const backupData = JSON.parse(fs.readFileSync(backupFile, 'utf8'));
        const client = await pool.connect();

        try {
            await client.query('BEGIN');

            for (const book of backupData) {
                await client.query(
                    'UPDATE books SET excerpt = $1 WHERE book_id = $2',
                    [book.excerpt, book.book_id]
                );
            }

            await client.query('COMMIT');
            console.log('‚úÖ Ph·ª•c h·ªìi d·ªØ li·ªáu th√†nh c√¥ng!');
        } catch (error) {
            await client.query('ROLLBACK');
            console.error('‚ùå L·ªói ph·ª•c h·ªìi d·ªØ li·ªáu:', error);
        } finally {
            client.release();
        }
    } catch (error) {
        console.error('‚ùå Kh√¥ng th·ªÉ ƒë·ªçc file backup:', error);
    }
}

// Ch·∫°y h√†m ch√≠nh
resetAndCrawlExcerpts()
    .then((results) => {
        console.log('Qu√° tr√¨nh x√≥a v√† crawl l·∫°i excerpt ho√†n t·∫•t');

        // H·ªèi ng∆∞·ªùi d√πng c√≥ mu·ªën restore t·ª´ backup kh√¥ng
        if (process.stdin.isTTY) {
            console.log('\nB·∫°n c√≥ mu·ªën ph·ª•c h·ªìi d·ªØ li·ªáu t·ª´ backup kh√¥ng? (y/n)');
            process.stdin.once('data', (data) => {
                const input = data.toString().trim().toLowerCase();
                if (input === 'y' || input === 'yes') {
                    restoreFromBackup(results.backupFile).then(() => process.exit(0));
                } else {
                    console.log('Tho√°t m√† kh√¥ng ph·ª•c h·ªìi d·ªØ li·ªáu.');
                    process.exit(0);
                }
            });
        } else {
            process.exit(0);
        }
    })
    .catch(err => {
        console.error('L·ªói nghi√™m tr·ªçng:', err);
        process.exit(1);
    });